/*
  interface Isolution {
    function solution(uint256[2][3] calldata firstArray, uint256[2][3] calldata secondArray) external pure returns (uint256[2][3] memory finalArray);
  }
*/


#define function solution(uint256[2][3] calldata,uint256[2][3] calldata) pure returns (uint256[2][3] memory)

#define macro UPDATE_MATRIX_POINTERS() = takes(2) returns(3){
    
    0x20 add               //[ptr1 +=0x20,ptr2]
    swap1                  //[ptr2, ptr1+=0x20]                
    0x20 add               //[ptr2+=0x20,ptr1+=0x20]
    swap1                  //[ptr1+=0x20,ptr2+=0x20]
    dup1                   //[ptr1+=0x20,ptr1+=0x20, ptr2+=0x20]
    0x0140 eq              //[0x0140, ptr1+=0x20, ptr1+=0x20, ptr2+=0x20]  
    returnMatrixEnd jumpi


    dup1                  //[ptr1+=0x20, ptr1+=0x20, ptr2+=0x20]
    LOAD_VALUES()



}

#define macro LOAD_VALUES() = takes(3) returns(2){
    mload                  //[m1[1][1], ptr1, ptr2]
    0x00 mstore            //[ptr1, ptr2]
    swap1                  //[ptr2, ptr1]
    dup1                   //[ptr2, ptr2, ptr1]
    mload                  //[m2[1][1], ptr2, ptr1]
    0x20 mstore            //[ptr2, ptr1] 
    swap1                  //[ptr1, ptr2]
    
    ADD_VALUES() 
}

#define macro ADD_VALUES() = takes(2) returns(2){

    0x00 mload                 //[0x00001]
    0x20 mload                 //[0x00007,0x00001]
    add
    0x40 mload                 //[fptr, 0x00008, ptr1, ptr2]
    mstore                     //[ptr1, ptr2]
    0x40 mload 
    0x20 add
    0x40 mstore               //[ptr1, ptr2]
    UPDATE_MATRIX_POINTERS()
}



#define macro MAIN() = takes(0) returns(0){
    0x80 0x40 mstore
        //load function selector
    0x00 calldataload 0xe0 shr //stack [function_sig]
    0x0180 //size
    0x04
    0x40 mload
    calldatacopy   	
    
 // CALLDATACOPY  memoryOffset offset size

    //MEMORY [0x80: (m1, m2)]
    //[func_sig] 
    0x0240  
    0x40 mstore 
    //[func_sign]
    //jump to correct function
    __FUNC_SIG(solution) eq                //stack [selector]
    solution jumpi                        //stack []

    0x00 0x00 revert
    
    solution:
        
        0x0140
        0x80
        dup1 //[ptr1, ptr1, ptr2]
        
        LOAD_VALUES()

    returnMatrixEnd:
        pop pop
        0xc0
        0x40 mload
        return
        stop
}
