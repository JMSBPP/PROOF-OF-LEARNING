/*
  interface Isolution {
    function solution(uint256[2][3] calldata firstArray, uint256[2][3] calldata secondArray) external pure returns (uint256[2][3] memory finalArray);
  }
*/


#define function solution(uint256[2][3] calldata,uint256[2][3] calldata) pure returns (uint256[2][3] memory)



#define macro ADD_MATRIX() = takes(3) returns(0){

    mload         //[m1[1][1], ptr1, ptr2]
    0x00 mstore            //[ptr1, ptr2]
    0x20 add               //[ptr1 +=0x20, ptr2]
    swap1 
    dup1                   //[ptr2,ptr2, ptr1]
    mload         //[m2[1][1],ptr2, ptr1]
    0x20 mstore            //[ptr2, ptr1]
    0x20 add               //[ptr2+=0x20,ptr1]
    swap1 dup1    //[ptr1,ptr1, ptr2]
    0x00 mload //[0x00001]
    0x20 mload //[0x00007,0x00001]
    add
    0x40 mload //[fptr, 0x00008 , ptr1, ptr1, ptr2]
    mstore //[ptr1, ptr1, ptr2]
    0x40 mload 
    0x20 add
    0x40 mstore
    ADD_MATRIX2()

}
#define macro ADD_MATRIX2() = takes(3) returns(0){

    mload         //[m1[1][1], ptr1, ptr2]
    0x00 mstore            //[ptr1, ptr2]
    0x20 add               //[ptr1 +=0x20, ptr2]
    swap1 
    dup1                   //[ptr2,ptr2, ptr1]
    mload         //[m2[1][1],ptr2, ptr1]
    0x20 mstore            //[ptr2, ptr1]
    0x20 add               //[ptr2+=0x20,ptr1]
    swap1 dup1    //[ptr1,ptr1, ptr2]
    0x00 mload //[0x00001]
    0x20 mload //[0x00007,0x00001]
    add
    0x40 mload //[fptr, 0x00008 , ptr1, ptr1, ptr2]
    mstore //[ptr1, ptr1, ptr2]
    0x40 mload 
    0x20 add
    0x40 mstore
    
    
    0x40
    0x40 mload
    return

}


#define macro MAIN() = takes(0) returns(0){
    0x80 0x40 mstore
        //load function selector
    0x00 calldataload 0xe0 shr //stack [function_sig]
    0x0180 //size
    0x04
    0x40 mload
    calldatacopy   	
    
 // CALLDATACOPY  memoryOffset offset size

    //MEMORY [0x80: (m1, m2)]
    //[func_sig]
    0x40 mload 
    0x0180 add 
    0x40 mstore 
    //[func_sign]
    //jump to correct function
    __FUNC_SIG(solution) eq                //stack [selector]
    solution jumpi                        //stack []

    
    solution:
        
        0x0140
        0x80
        dup1 //[ptr1, ptr1, ptr2]
        
        ADD_MATRIX()

}
